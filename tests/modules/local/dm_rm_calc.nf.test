nextflow_process {

    name "Test Process DM_RM_CALC"
    script "modules/local/dm_rm_calc.nf"
    process "DM_RM_CALC"

    test("J1534-5334_2023-05-05-01:07:10_1: period: slow   DM: low    obs_len: short ") {
        tag "short"
        when {
            params {
                outdir = "$outputDir"
            }
            process {
                """
                input[0] =  Channel.fromList([
                    tuple(
                        // meta map
                        [
                            id: "J1534-5334_2023-05-05-01:07:10_1",
                            pulsar: "J1534-5334",
                            utc: "2023-05-05-01:07:10",
                            beam: 1,
                            dur: 116.53766938317756,
                            cal_loc: "",
                            band: "LBAND",
                            snr: 259.778747558594,
                            obs_nchan: 1024,
                            obs_nbin: 1024,
                        ],
                    "$baseDir/tests/test_data/J1534-5334.par",
                    "$baseDir/tests/test_data/J1534-5334.std",
                    "$baseDir/tests/test_data/J1534-5334_2023-05-05-01:07:10_1/J1534-5334_2023-05-05-01:07:10_raw.ar",
                    "$baseDir/tests/test_data/J1534-5334_2023-05-05-01:07:10_1/J1534-5334_2023-05-05-01:07:10_zap.ar",
                    )
                ])
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert path(process.out.get(0)[0][5]).json["DM"] == "25.26115313620792671" },
                { assert path(process.out.get(0)[0][5]).json["ERR"] == "0.03045467190105807451" },
                { assert path(process.out.get(0)[0][5]).json["EPOCH"] == "59400" },
                { assert path(process.out.get(0)[0][5]).json["CHI2R"] == "1.2659" },
                { assert path(process.out.get(0)[0][5]).json["TRES"] == "122.370" },
                { assert path(process.out.get(0)[0][5]).json["RM"] == "22.3814" },
                { assert path(process.out.get(0)[0][5]).json["RM_ERR"] == "13.35" },
            )
        }
    }

    test("J1410-7404_2020-09-05-10:00:47_2: period: medium DM: medium obs_len: short ") {
        tag "short"
        when {
            params {
                outdir = "$outputDir"
            }
            process {
                """
                input[0] =  Channel.fromList([
                    tuple(
                        // meta map
                        [
                            id: "J1410-7404_2020-09-05-10:00:47_2",
                            pulsar: "J1410-7404",
                            utc: "2020-09-05-10:00:47",
                            beam: 2,
                            dur: 89.60730437383191,
                            cal_loc: "",
                            band: "LBAND",
                            snr: 80.4668273925781,
                            obs_nchan: 1024,
                            obs_nbin: 1024,
                        ],
                    "$baseDir/tests/test_data/J1410-7404.par",
                    "$baseDir/tests/test_data/J1410-7404.std",
                    "$baseDir/tests/test_data/J1410-7404_2020-09-05-10:00:47_2/J1410-7404_2020-09-05-10:00:47_raw.ar",
                    "$baseDir/tests/test_data/J1410-7404_2020-09-05-10:00:47_2/J1410-7404_2020-09-05-10:00:47_zap.ar",
                    )
                ])
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert path(process.out.get(0)[0][5]).json["DM"] == "54.238033174312628385" },
                { assert path(process.out.get(0)[0][5]).json["ERR"] == "0.00601315609408512551" },
                { assert path(process.out.get(0)[0][5]).json["EPOCH"] == "59400" },
                { assert path(process.out.get(0)[0][5]).json["CHI2R"] == "0.5028" },
                { assert path(process.out.get(0)[0][5]).json["TRES"] == "21.420" },
                { assert path(process.out.get(0)[0][5]).json["RM"] == "-5.93805" },
                { assert path(process.out.get(0)[0][5]).json["RM_ERR"] == "14.67" },
            )
        }
    }

    test("J0437-4715_2019-03-26-16:26:02_1: period: MSP    DM: low    obs_len: short ") {
        tag "short"
        when {
            params {
                outdir = "$outputDir"
            }
            process {
                """
                input[0] =  Channel.fromList([
                    tuple(
                        // meta map
                        [
                            id: "J0437-4715_2019-03-26-16:26:02_1",
                            pulsar: "J0437-4715",
                            utc: "2019-03-26-16:26:02",
                            beam: 1,
                            dur: 15.999999999999988,
                            cal_loc: "/fred/oz005/users/aparthas/reprocessing_MK/poln_calibration/2019-03-26-16:10:39.jones",
                            band: "LBAND",
                            snr: 9052.873046875,
                            obs_nchan: 1024,
                            obs_nbin: 1024,
                        ],
                    "$baseDir/tests/test_data/J0437-4715.par",
                    "$baseDir/tests/test_data/J0437-4715.std",
                    "$baseDir/tests/test_data/J0437-4715_2019-03-26-16:26:02_1/J0437-4715_2019-03-26-16:26:02_raw.ar",
                    "$baseDir/tests/test_data/J0437-4715_2019-03-26-16:26:02_1/J0437-4715_2019-03-26-16:26:02_zap.ar",
                    )
                ])
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert path(process.out.get(0)[0][5]).json["DM"] == "2.6420829270058230622" },
                { assert path(process.out.get(0)[0][5]).json["ERR"] == "0.00011358072306644368" },
                { assert path(process.out.get(0)[0][5]).json["EPOCH"] == "54500" },
                { assert path(process.out.get(0)[0][5]).json["CHI2R"] == "1.2506" },
                { assert path(process.out.get(0)[0][5]).json["TRES"] == "0.246" },
                { assert path(process.out.get(0)[0][5]).json["RM"] == "0.641258" },
                { assert path(process.out.get(0)[0][5]).json["RM_ERR"] == "0.34" },
            )
        }
    }

    test("J0514-4408_2020-02-21-17:50:16_1: period: medium DM: low    obs_len: medium no template") {
        when {
            params {
                outdir = "$outputDir"
            }
            process {
                """
                input[0] =  Channel.fromList([
                    tuple(
                        // meta map
                        [
                            id: "J0514-4408_2020-02-21-17:50:16_1",
                            pulsar: "J0514-4408",
                            utc: "2020-02-21-17:50:16",
                            beam: 1,
                            dur: 1800.00,
                            cal_loc: "",
                            band: "LBAND",
                            snr: "None",
                            obs_nchan: 1024,
                            obs_nbin: 1024,
                        ],
                    "$baseDir/tests/test_data/J0514-4408.par",
                    "$baseDir/tests/test_data/no_template.std",
                    "$baseDir/tests/test_data/J0514-4408_2020-02-21-17:50:16_1/J0514-4408_2020-02-21-17:50:16_raw.ar",
                    "$baseDir/tests/test_data/J0514-4408_2020-02-21-17:50:16_1/J0514-4408_2020-02-21-17:50:16_zap.ar",
                    )
                ])
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert path(process.out.get(0)[0][5]).json["DM"] == "None" },
                { assert path(process.out.get(0)[0][5]).json["ERR"] == "None" },
                { assert path(process.out.get(0)[0][5]).json["EPOCH"] == "None" },
                { assert path(process.out.get(0)[0][5]).json["CHI2R"] == "None" },
                { assert path(process.out.get(0)[0][5]).json["TRES"] == "None" },
                { assert path(process.out.get(0)[0][5]).json["RM"] == "None" },
                { assert path(process.out.get(0)[0][5]).json["RM_ERR"] == "None" },
            )
        }
    }

    test("J1904+0451_2020-08-26-17:24:01_3: period: medium DM: low    obs_len: medium pdmp") {
        when {
            params {
                outdir = "$outputDir"
            }
            process {
                """
                input[0] =  Channel.fromList([
                    tuple(
                        // meta map
                        [
                            id: "J1904+0451_2020-08-26-17:24:01_3",
                            pulsar: "J1904+0451",
                            utc: "2020-08-26-17:24:01",
                            beam: 3,
                            dur: 1016.000,
                            cal_loc: "",
                            band: "LBAND",
                            snr: 17.3289585113525,
                            obs_nchan: 1024,
                            obs_nbin: 1024,
                        ],
                    "$baseDir/tests/test_data/J1904+0451.par",
                    "$baseDir/tests/test_data/J1904+0451.std",
                    "$baseDir/tests/test_data/J1904+0451_2020-08-26-17:24:01_3/J1904+0451_2020-08-26-17:24:01_raw.ar",
                    "$baseDir/tests/test_data/J1904+0451_2020-08-26-17:24:01_3/J1904+0451_2020-08-26-17:24:01_zap.ar",
                    )
                ])
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert path(process.out.get(0)[0][5]).json["DM"] == "182.678" },
                { assert path(process.out.get(0)[0][5]).json["ERR"] == "0.069" },
                { assert path(process.out.get(0)[0][5]).json["EPOCH"] == "59087.735280" },
                { assert path(process.out.get(0)[0][5]).json["CHI2R"] == "None" },
                { assert path(process.out.get(0)[0][5]).json["TRES"] == "None" },
                { assert path(process.out.get(0)[0][5]).json["RM"] == "None" },
                { assert path(process.out.get(0)[0][5]).json["RM_ERR"] == "None" },
            )
        }
    }

    test("J1658-5324_2022-02-09-02:47:59_1: period: medium DM: low    obs_len: medium no RM width error") {
        when {
            params {
                outdir = "$outputDir"
            }
            process {
                """
                input[0] =  Channel.fromList([
                    tuple(
                        // meta map
                        [
                            id: "J1658-5324_2022-02-09-02:47:59_1",
                            pulsar: "J1658-5324",
                            utc: "2022-02-09-02:47:59",
                            beam: 1,
                            dur: 319.55,
                            cal_loc: "",
                            band: "LBAND",
                            snr: 20.5,
                            obs_nchan: 1024,
                            obs_nbin: 1024,
                        ],
                    "$baseDir/tests/test_data/J1658-5324.par",
                    "$baseDir/tests/test_data/J1658-5324.std",
                    "$baseDir/tests/test_data/J1658-5324_2022-02-09-02:47:59_1/J1658-5324_2022-02-09-02:47:59_raw.ar",
                    "$baseDir/tests/test_data/J1658-5324_2022-02-09-02:47:59_1/J1658-5324_2022-02-09-02:47:59_zap.ar",
                    )
                ])
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert path(process.out.get(0)[0][5]).json["DM"] == "30.828810512928090128" },
                { assert path(process.out.get(0)[0][5]).json["ERR"] == "0.00023992226050556316" },
                { assert path(process.out.get(0)[0][5]).json["EPOCH"] == "59000" },
                { assert path(process.out.get(0)[0][5]).json["CHI2R"] == "0.0072" },
                { assert path(process.out.get(0)[0][5]).json["TRES"] == "0.282" },
                { assert path(process.out.get(0)[0][5]).json["RM"] == "-8.188" },
                { assert path(process.out.get(0)[0][5]).json["RM_ERR"] == "None" },
            )
        }
    }
}
